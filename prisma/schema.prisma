// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  // Relationship
  Product Product[]

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(200)
  slug        String   @unique
  description String
  inStock     Int?     @default(0) @map("in_stock")
  price       Float?   @default(0)
  sizes       Size[]   @default([])
  tags        String[] @default([])
  gender      Gender

  // Relationship
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id")

  OrderItem OrderItem[]

  // Timestamps
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  ProductImage ProductImage[]

  // Indexes
  @@index([title, gender])
  @@map("products")
}

model ProductImage {
  id        String @id @default(uuid())
  productId String @map("product_id")
  url       String

  // Relationship
  product Product @relation(fields: [productId], references: [id])

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_images")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  // Relationship
  address UserAddress?
  order Order[]
}

model Country {
  id String @id
  name String @unique
  UserAddress UserAddress[]

  OrderAddress OrderAddress[]
}

model UserAddress {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  address2 String?
  postalCode String
  phone String
  city String

  // Relationship
  country Country @relation(fields: [countryId], references: [id])
  countryId String @map("country_id")

  user User @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")
}

model Order {
  id String @id @default(uuid())
  itemsInOrder Int
  subtotal Float
  tax Float
  total Float
  isPaid Boolean @default(false) @map("is_paid")
  paidAt DateTime? @map("paid_at")

  transactionId String? @map("transaction_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  OrderItem OrderItem[]
  OrderAddress OrderAddress?
}

model OrderItem {
  id String @id @default(uuid())
  quantity Int
  price Float
  size Size

  // Relationships

  order Order @relation(fields: [orderId], references: [id])
  orderId String @map("order_id")

  product Product @relation(fields: [productId], references: [id])
  productId String @map("product_id")
}

model OrderAddress {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  address2 String?
  postalCode String
  phone String
  city String

  // Relationship
  country Country @relation(fields: [countryId], references: [id])
  countryId String @map("country_id")

  order Order @relation(fields: [orderId], references: [id])
  orderId String @unique @map("order_id")
}